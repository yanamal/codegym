---
layout: framed
---

<div style="position:fixed;top:0;left:0;right:0;bottom:0;">

<div id="instructions" class="carousel slide" data-interval="false">
  <div class="carousel-inner">
    <div class="item active">
      <div class="instruction container-margins">
        <h2><%= @document.title %> <small><%= @document.subtitle %></small></h2>
        <p><%- @document.mission %>
      </div>
    </div>
    <% if @document.instructions then for inst in @document.instructions: %>
    <div class="item">
      <div class="instruction container">
        <h2><%= inst.title %> <small><%= inst.subtitle %></small></h1>
        <p><%- inst.mission %>
      </div>
    </div>
    <% end %>
  </div>
  <a class="left carousel-control" href="#instructions" style="display:none" data-slide="prev"><span class="glyphicon glyphicon-chevron-left" style="left:5px"></span></a>
  <a class="right carousel-control" href="#instructions" data-slide="next"><span class="glyphicon glyphicon-chevron-right" style="right:5px;left:inherit"></span></a>

<% if @document.instructions: %>
<div id="more" class="btn btn-default topright">Learn More&nbsp;
<span class="glyphicon glyphicon-circle-arrow-right"></span></div>
<% end %>
</div>

<% if @document.teaser : %>
<xmp id="teaser" class="data"><%- @document.teaser %></xmp>
<% end %>

<xmp id="starter" class="data"><%- @document.code %></xmp>
<xmp id="hint" class="data"><%- @document.hint %></xmp>

<div id="blocks" title="Toggle Code and Blocks" class="btn btn-default pull-left gap-right" style="background-color:#8fbfef;color:white;position:absolute;left:0;height:90px;padding:30px 1px;border-top-left-radius:17px;border-bottom-left-radius:17px;border-top-right-radius:0;border-bottom-right-radius:0;z-index:1;"><span class="glyphicon glyphicon-indent-left"></span></div>
<div id="codeframe" class="container-margins" style="flex-grow:1">
</div>

<center class="container-margins reflinks">
<!-- TODO: figure out what teaser is for for and/or remove; currently broken?-->
<% if @document.teaser : %>
<div id="intro" title="Show hint again" class="btn btn-default pull-left gap-right"><span class="glyphicon glyphicon-repeat"></span></div>
<% end %>
<div id="reset" title="Reset code to original" class="btn btn-default pull-left gap-right">Reset</div>
<% if not @document.refs: %>
<span class="btn">&nbsp;</span>
<% end %>
<% if @document.refs: %>
<span class="btn"><a target="reference" style="color:inherit;text-decoration:inherit" href="/ref/reference.html">Reference:&nbsp;</a></span>
<!-- TODO: add custom "deploy" button here -->
<!-- TODO: buttons only rendered within reference if - no buttons when no reference? -->
<div id="deploy" title="Deploy to Doggie And Me" class="btn btn-default pull-right gap-right" data-toggle="modal" data-target="#qrModal"><span class="glyphicon glyphicon-qrcode"></span> Deploy!</div>
<% for ref in (@document.refs or []): %><a target="reference" class="btn btn-default gap-right" href="/ref/<%= ref.replace(/\s/g, '_') %>.html"><%=ref%></a><% end %>
<% end %>
</center>
</div>


<div id="qrModal" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Scan the code!</h4>
      </div>
      <div class="modal-body">
        <span id="qrcode"></span>
        <p>Scan this QR code with the Doggie And Me app to add the game to the app!</p>
        <p>You can also access the gist we just created <span id="gisturl"></span> </p>
        
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>

  </div>
</div>

</div> <!-- end flex container -->
<xmp id="setupcode" style="display:none">
# common setup code here.
window.print = ->
  write 'Try using <b>write</b> instead of <b>print</b>.'
# remove default error handling UI.
window.removeEventListener 'error', see
thepopup = null
popup = (t) ->
  if $('#error-advice').length
    thepopup = $('#error-advice')
  if thepopup
    thepopup.html t
    return
  thepopup = write """
    <center>#{t}</center>
  """
  thepopup.css
    background: rgba(240,240,240,0.8)
    fontFamily: 'Arial'
    margin: '5px 15%'
    padding: '8px'
    borderRadius: '8px'
    boxShadow: '0 0 5px dimgray'

hints = null
lasterrorevent = null

$(window).on 'error', (e) ->
  lasterrorevent = e
  if hints then do hints

<%- @content %>
</xmp>

</article>
<script src="//pencilcode.net/lib/pencilcodeembed.js"></script>
<script>

function fixbase() {
  if (!window.$) return; // skip if jquery is undefined.
  if ($('base').length == 0) {
    $(document.head).append('<base>');
  }
  $('base').attr('href', "BASEURL");
}
var fixbasescript =
  fixbase.toString().replace('BASEURL', location.href.replace(/^http.?:/, ''))
      + "\nfixbase();";

$('.carousel').carousel();
function updatePagers() {
  var self = $(this);
  self.children('.carousel-control').show();
  if ($('.carousel-inner .item:first').hasClass('active')) {
    self.children('.left.carousel-control').hide();
  }
  if ($('.carousel-inner .item:last').hasClass('active')) {
    self.children('.right.carousel-control').hide();
  }
}
$('#instructions').each(updatePagers).on('slid', '', updatePagers);

function storageName() {
  return 'gym:' + location.pathname;
}

function loadStorage() {
  try {
    return localStorage.getItem(storageName()) || null;
  } catch (e) {
    return null;
  }
}

function saveStorage(c) {
  try {
    if (!c) {
      localStorage.removeItem();
    } else {
      localStorage.setItem(storageName(), c);
    }
  } catch (e) { }
}

var cf = document.getElementById('codeframe'),
    starter = document.getElementById('starter'),
    originalCode = starter.textContent,
    code = loadStorage() || originalCode,
    modified = (code.trim() != originalCode.trim()),
    setup = document.getElementById('setupcode').innerHTML,
    pce = new PencilCodeEmbed(cf);

pce.on('update', function(c) {
  $('#reset').toggleClass('btn-highlight', (c.trim() != originalCode.trim()));
  saveStorage(c);
});

var mode = '';
<% if @document.mode: %>
mode = "<%= @document.mode %>";
<% end %>

var blockMode = <%= !!(@document.blocks) %>;

if (navigator.userAgent.indexOf('Trident') != -1) {
  pce.on('load', function() {
    pce.setupScript([
      {code: fixbasescript, type: 'text/javascript'},
      {code: setup, type: 'text/coffeescript'},
      {src: '/scripts/doglib.js', type: 'text/javascript'}
    ]);
    pce.setCode(code);
  });
  pce.beginLoad({mode:mode, blocks:blockMode});
} else {
  // Using the url for all initialization is less buggy, if supported
  // URLs are long enough.
  pce.beginLoad({code: code, mode: mode, blocks:blockMode, setup: [
    {code: fixbasescript, type: 'text/javascript'},
    {code: setup, type: 'text/coffeescript'},
    {src: '/scripts/doglib.js', type: 'text/javascript'}
  ]});
}

pce.on('load', function() {
  pce.setBlockOptions(defaultPalette.blocks, {functions: defaultPalette.knownFunctions});
});

$('#blocks').click(function() {
  blockMode = !blockMode;
  pce.setBlockMode(blockMode);
});

$('#more').click(function() { $('#instructions').carousel('next'); });
$('#reset').click(function() {
  pce.setCode(originalCode);
  // setCode also resets the block options. I think this is a bug.
  pce.setBlockOptions(defaultPalette.blocks, {functions: defaultPalette.knownFunctions});
});

function doresize() {
  $('#codeframe').height(
    $(window).height() -
    $('#instructions').outerHeight() -
    $('.reflinks').outerHeight());
}

var defaultname = window.location.pathname.replace(/^.*\/|\.[^\/\.]*$/g, '') +
  (mode ? "." + mode : "");

$('#save').click(function() {
  $('#tlayer').hide();
  pce.save(defaultname);
});


$('#deploy').click(function() {

  $('#qrcode').html('Loading, hang on...')
  $('#gisturl').html('')

  $.ajax({
    type: 'POST',
    url: "https://api.github.com/gists",
    data: JSON.stringify({
      "description":"A Doggie And Me game",
      "public":false,
      "files":{
        "game.coffee":{
          "content":loadStorage()
        }
      }
    }),
    error: function(e) {
      console.log(e);
      $('#qrcode').html('<h2>Oops! something went wrong</h2>')
    },
    success: function(e) {
      $('#qrcode').html('')
      $('#qrcode').qrcode(e.files['game.coffee'].raw_url)
      $('#gisturl').html('<a href="'+e.html_url+'"  target="_blank">here</a>')
    },
    dataType: "json",
    contentType: "application/json"
  });
});

$('.btn[title]').tooltip();

doresize();
$(window).resize(doresize);

if ($('#teaser').length) {
  $(cf).append('<div id="tlayer"></div>');
  var hint_contents =
    '<!doctype html>\n' +
    '<html><base href="' + location.href + '">\n' +
    '<body><script src="//pencilcode.net/turtlebits.js" ' +
    'crossorigin="anonymous"><\x2fscript><script type="text/coffeescript">' +
    $(teaser).text() + '<\x2fscript></body></html>';
  function runteaser() {
    $('#tlayer').html('<iframe class="teaser" id="tframe"></iframe>' +
      '<div title="close the example" data-placement="left" ' +
        'class="closebox glyphicon glyphicon-remove-circle"></div>');
    $('#tframe')[0].contentWindow.location.href = 'about:blank';
    $('#tframe')[0].contentWindow.document.open();
    $('#tframe')[0].contentWindow.document.write(hint_contents);
    $('#tframe')[0].contentWindow.document.close();
    $('#tlayer .closebox').tooltip().click(function() {
      $('#tlayer').fadeOut();
    });
  }
  if (modified) {
    $('#tlayer').hide();
  } else {
    runteaser();
  }
  $('#intro').click(function() {
    $('#tlayer').show();
    runteaser();
  });
  setTimeout(function() {
    if ($('#tlayer').is(':visible')) {
      $('#tlayer .closebox').tooltip('show');
    }
  }, <%- @document.teasersecs || 20 %> * 1000);
}

</script>
